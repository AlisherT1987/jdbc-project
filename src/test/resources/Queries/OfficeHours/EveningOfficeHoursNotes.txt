Review SQL with Oscar
Your questions and Interview perspective
* How do you do DB testing and how you connect to DB?
* What was your of purpose of DB testing?
 --- Feed your front end testing data with info from database: expected vs actual
 --- verify UI and DB information is matching
 --- to connect any DB: "connection string"  --- url of DB (IP + port), username, password and specific driver for DBMS
* questions on joins ?
* Data vs DataBase
- HR database : tables are connected with primary keys and foreign keys -- Relational DB Management Systems
- Non-relational DB: key and value structure - mongoDB

** in cydeo apps: HR-oracle, Library-mySQL
SQL : structured query language
Data Query Lang: Select --- gives you table column information
Data Manipulation Lang: Insert, Delete, Update
Data Definition lang: create, alter, drop, rename, truncate

PIQ: what are/is a wild card in SQL? we know some part of the info
we use like statement with % (more than one chars) and _ (one char)

WHen we use group by statement; we need to ask information about that group

PIQ : What is difference between where and having?
where is used as filtering option before grouping
having is used as filtering option after grouping


*** they might give you a generic, not real database table names;

Students Table : name, id (pk), region_id (FK), batchNumber (FK)
Batches Table : batchNumber(pk), total students, start_date, end_date
Regions Table : region_id (pk), region_name ....

*** give me all the students from batch 28 that lives in Colorado
select * from students s join regions r on s.region_id=r.regions_id where batchNumber=28 and region_name='Colorado';

PIQ: Find me duplicate names in Students Table

select name, count(*) from students group by name; ----->
name    count
arclean  1
oscar    3
ahmet    5
mehmet   4
sevket   1

select name, count(*) from students group by name having count() > 1;
oscar    3
ahmet    5
mehmet   4

PIQ: Tell me about joins in SQL?
-- if we have information at different tables that can be joined over PK - FK, then we joins
- inner join
- outer join
- left outer join
- right outer join

